//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Core
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class hospitalEntities : DbContext
    {
        public hospitalEntities()
            : base("name=hospitalEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AperturaYCierreDeCaja> AperturaYCierreDeCaja { get; set; }
        public virtual DbSet<Aseguradora> Aseguradora { get; set; }
        public virtual DbSet<Autorizacion> Autorizacion { get; set; }
        public virtual DbSet<Caja> Caja { get; set; }
        public virtual DbSet<Caja_Usuario> Caja_Usuario { get; set; }
        public virtual DbSet<Cuenta_Factura> Cuenta_Factura { get; set; }
        public virtual DbSet<Cuentas> Cuentas { get; set; }
        public virtual DbSet<Egreso> Egreso { get; set; }
        public virtual DbSet<FacturaDetalle> FacturaDetalle { get; set; }
        public virtual DbSet<FacturaEncabezado> FacturaEncabezado { get; set; }
        public virtual DbSet<Log> Log { get; set; }
        public virtual DbSet<LogGeneral> LogGeneral { get; set; }
        public virtual DbSet<NCF> NCF { get; set; }
        public virtual DbSet<Pago> Pago { get; set; }
        public virtual DbSet<Perfil> Perfil { get; set; }
        public virtual DbSet<Persona> Persona { get; set; }
        public virtual DbSet<PlanDeTratamiento> PlanDeTratamiento { get; set; }
        public virtual DbSet<ProcesoMedico> ProcesoMedico { get; set; }
        public virtual DbSet<ReciboIngreso> ReciboIngreso { get; set; }
        public virtual DbSet<TipoDocumento> TipoDocumento { get; set; }
        public virtual DbSet<TipoNCF> TipoNCF { get; set; }
        public virtual DbSet<TipoPago> TipoPago { get; set; }
        public virtual DbSet<TipoPersona> TipoPersona { get; set; }
        public virtual DbSet<TipoProceso> TipoProceso { get; set; }
        public virtual DbSet<Usuarios> Usuarios { get; set; }
        public virtual DbSet<PagosPorPersona_View> PagosPorPersona_View { get; set; }
        public virtual DbSet<database_firewall_rules> database_firewall_rules { get; set; }
        public virtual DbSet<ipv6_database_firewall_rules> ipv6_database_firewall_rules { get; set; }
    
        public virtual int IncrementarNCF(Nullable<int> tipoNCF)
        {
            var tipoNCFParameter = tipoNCF.HasValue ?
                new ObjectParameter("TipoNCF", tipoNCF) :
                new ObjectParameter("TipoNCF", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("IncrementarNCF", tipoNCFParameter);
        }
    
        public virtual int PP_GrabarDetalle(Nullable<int> idPlanDeTratamiento, Nullable<decimal> montoBruto, Nullable<decimal> montoCobertura, Nullable<decimal> montoItbis, Nullable<decimal> montoDescuento, Nullable<int> idUsuario)
        {
            var idPlanDeTratamientoParameter = idPlanDeTratamiento.HasValue ?
                new ObjectParameter("IdPlanDeTratamiento", idPlanDeTratamiento) :
                new ObjectParameter("IdPlanDeTratamiento", typeof(int));
    
            var montoBrutoParameter = montoBruto.HasValue ?
                new ObjectParameter("MontoBruto", montoBruto) :
                new ObjectParameter("MontoBruto", typeof(decimal));
    
            var montoCoberturaParameter = montoCobertura.HasValue ?
                new ObjectParameter("MontoCobertura", montoCobertura) :
                new ObjectParameter("MontoCobertura", typeof(decimal));
    
            var montoItbisParameter = montoItbis.HasValue ?
                new ObjectParameter("MontoItbis", montoItbis) :
                new ObjectParameter("MontoItbis", typeof(decimal));
    
            var montoDescuentoParameter = montoDescuento.HasValue ?
                new ObjectParameter("MontoDescuento", montoDescuento) :
                new ObjectParameter("MontoDescuento", typeof(decimal));
    
            var idUsuarioParameter = idUsuario.HasValue ?
                new ObjectParameter("IdUsuario", idUsuario) :
                new ObjectParameter("IdUsuario", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PP_GrabarDetalle", idPlanDeTratamientoParameter, montoBrutoParameter, montoCoberturaParameter, montoItbisParameter, montoDescuentoParameter, idUsuarioParameter);
        }
    
        public virtual int PP_GrabarVenta(Nullable<int> idNCF, string idCliente, string idCajero, Nullable<decimal> totalBruto, Nullable<decimal> totalCobertura, Nullable<decimal> totalItbis, Nullable<decimal> totalDescuento, Nullable<decimal> totalGeneral, Nullable<int> idUsuarioCreador)
        {
            var idNCFParameter = idNCF.HasValue ?
                new ObjectParameter("IdNCF", idNCF) :
                new ObjectParameter("IdNCF", typeof(int));
    
            var idClienteParameter = idCliente != null ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(string));
    
            var idCajeroParameter = idCajero != null ?
                new ObjectParameter("IdCajero", idCajero) :
                new ObjectParameter("IdCajero", typeof(string));
    
            var totalBrutoParameter = totalBruto.HasValue ?
                new ObjectParameter("TotalBruto", totalBruto) :
                new ObjectParameter("TotalBruto", typeof(decimal));
    
            var totalCoberturaParameter = totalCobertura.HasValue ?
                new ObjectParameter("TotalCobertura", totalCobertura) :
                new ObjectParameter("TotalCobertura", typeof(decimal));
    
            var totalItbisParameter = totalItbis.HasValue ?
                new ObjectParameter("TotalItbis", totalItbis) :
                new ObjectParameter("TotalItbis", typeof(decimal));
    
            var totalDescuentoParameter = totalDescuento.HasValue ?
                new ObjectParameter("TotalDescuento", totalDescuento) :
                new ObjectParameter("TotalDescuento", typeof(decimal));
    
            var totalGeneralParameter = totalGeneral.HasValue ?
                new ObjectParameter("TotalGeneral", totalGeneral) :
                new ObjectParameter("TotalGeneral", typeof(decimal));
    
            var idUsuarioCreadorParameter = idUsuarioCreador.HasValue ?
                new ObjectParameter("IdUsuarioCreador", idUsuarioCreador) :
                new ObjectParameter("IdUsuarioCreador", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PP_GrabarVenta", idNCFParameter, idClienteParameter, idCajeroParameter, totalBrutoParameter, totalCoberturaParameter, totalItbisParameter, totalDescuentoParameter, totalGeneralParameter, idUsuarioCreadorParameter);
        }
    
        public virtual int PP_ReciboIngreso(string idPaciente, string idCajero, Nullable<decimal> monto, Nullable<int> idUsuario)
        {
            var idPacienteParameter = idPaciente != null ?
                new ObjectParameter("IdPaciente", idPaciente) :
                new ObjectParameter("IdPaciente", typeof(string));
    
            var idCajeroParameter = idCajero != null ?
                new ObjectParameter("IdCajero", idCajero) :
                new ObjectParameter("IdCajero", typeof(string));
    
            var montoParameter = monto.HasValue ?
                new ObjectParameter("Monto", monto) :
                new ObjectParameter("Monto", typeof(decimal));
    
            var idUsuarioParameter = idUsuario.HasValue ?
                new ObjectParameter("IdUsuario", idUsuario) :
                new ObjectParameter("IdUsuario", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PP_ReciboIngreso", idPacienteParameter, idCajeroParameter, montoParameter, idUsuarioParameter);
        }
    
        public virtual int PPAperturaOCierreDeCaja(Nullable<int> idCaja, Nullable<int> dosMilPesos, Nullable<int> milPesos, Nullable<int> quinientosPesos, Nullable<int> doscientosPesos, Nullable<int> cienPesos, Nullable<int> cincuentaPesos, Nullable<int> veinteCincoPesos, Nullable<int> diezPesos, Nullable<int> cincoPesos, Nullable<int> unPeso, Nullable<double> totalCredito, Nullable<double> totalTarjeta, Nullable<double> transferencia, Nullable<double> deposito, Nullable<double> cheques, Nullable<bool> aperturaOCierre, Nullable<int> idUsuario)
        {
            var idCajaParameter = idCaja.HasValue ?
                new ObjectParameter("IdCaja", idCaja) :
                new ObjectParameter("IdCaja", typeof(int));
    
            var dosMilPesosParameter = dosMilPesos.HasValue ?
                new ObjectParameter("DosMilPesos", dosMilPesos) :
                new ObjectParameter("DosMilPesos", typeof(int));
    
            var milPesosParameter = milPesos.HasValue ?
                new ObjectParameter("MilPesos", milPesos) :
                new ObjectParameter("MilPesos", typeof(int));
    
            var quinientosPesosParameter = quinientosPesos.HasValue ?
                new ObjectParameter("QuinientosPesos", quinientosPesos) :
                new ObjectParameter("QuinientosPesos", typeof(int));
    
            var doscientosPesosParameter = doscientosPesos.HasValue ?
                new ObjectParameter("DoscientosPesos", doscientosPesos) :
                new ObjectParameter("DoscientosPesos", typeof(int));
    
            var cienPesosParameter = cienPesos.HasValue ?
                new ObjectParameter("CienPesos", cienPesos) :
                new ObjectParameter("CienPesos", typeof(int));
    
            var cincuentaPesosParameter = cincuentaPesos.HasValue ?
                new ObjectParameter("CincuentaPesos", cincuentaPesos) :
                new ObjectParameter("CincuentaPesos", typeof(int));
    
            var veinteCincoPesosParameter = veinteCincoPesos.HasValue ?
                new ObjectParameter("VeinteCincoPesos", veinteCincoPesos) :
                new ObjectParameter("VeinteCincoPesos", typeof(int));
    
            var diezPesosParameter = diezPesos.HasValue ?
                new ObjectParameter("DiezPesos", diezPesos) :
                new ObjectParameter("DiezPesos", typeof(int));
    
            var cincoPesosParameter = cincoPesos.HasValue ?
                new ObjectParameter("CincoPesos", cincoPesos) :
                new ObjectParameter("CincoPesos", typeof(int));
    
            var unPesoParameter = unPeso.HasValue ?
                new ObjectParameter("UnPeso", unPeso) :
                new ObjectParameter("UnPeso", typeof(int));
    
            var totalCreditoParameter = totalCredito.HasValue ?
                new ObjectParameter("TotalCredito", totalCredito) :
                new ObjectParameter("TotalCredito", typeof(double));
    
            var totalTarjetaParameter = totalTarjeta.HasValue ?
                new ObjectParameter("TotalTarjeta", totalTarjeta) :
                new ObjectParameter("TotalTarjeta", typeof(double));
    
            var transferenciaParameter = transferencia.HasValue ?
                new ObjectParameter("Transferencia", transferencia) :
                new ObjectParameter("Transferencia", typeof(double));
    
            var depositoParameter = deposito.HasValue ?
                new ObjectParameter("Deposito", deposito) :
                new ObjectParameter("Deposito", typeof(double));
    
            var chequesParameter = cheques.HasValue ?
                new ObjectParameter("Cheques", cheques) :
                new ObjectParameter("Cheques", typeof(double));
    
            var aperturaOCierreParameter = aperturaOCierre.HasValue ?
                new ObjectParameter("AperturaOCierre", aperturaOCierre) :
                new ObjectParameter("AperturaOCierre", typeof(bool));
    
            var idUsuarioParameter = idUsuario.HasValue ?
                new ObjectParameter("IdUsuario", idUsuario) :
                new ObjectParameter("IdUsuario", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PPAperturaOCierreDeCaja", idCajaParameter, dosMilPesosParameter, milPesosParameter, quinientosPesosParameter, doscientosPesosParameter, cienPesosParameter, cincuentaPesosParameter, veinteCincoPesosParameter, diezPesosParameter, cincoPesosParameter, unPesoParameter, totalCreditoParameter, totalTarjetaParameter, transferenciaParameter, depositoParameter, chequesParameter, aperturaOCierreParameter, idUsuarioParameter);
        }
    
        public virtual int PPEgreso(string pagadoA, string cedula, Nullable<double> monto, string concepto, string preparado, string aprobado, string recibido, Nullable<int> idUsuario, Nullable<int> id, Nullable<int> caja, Nullable<int> operacion)
        {
            var pagadoAParameter = pagadoA != null ?
                new ObjectParameter("PagadoA", pagadoA) :
                new ObjectParameter("PagadoA", typeof(string));
    
            var cedulaParameter = cedula != null ?
                new ObjectParameter("Cedula", cedula) :
                new ObjectParameter("Cedula", typeof(string));
    
            var montoParameter = monto.HasValue ?
                new ObjectParameter("Monto", monto) :
                new ObjectParameter("Monto", typeof(double));
    
            var conceptoParameter = concepto != null ?
                new ObjectParameter("Concepto", concepto) :
                new ObjectParameter("Concepto", typeof(string));
    
            var preparadoParameter = preparado != null ?
                new ObjectParameter("Preparado", preparado) :
                new ObjectParameter("Preparado", typeof(string));
    
            var aprobadoParameter = aprobado != null ?
                new ObjectParameter("Aprobado", aprobado) :
                new ObjectParameter("Aprobado", typeof(string));
    
            var recibidoParameter = recibido != null ?
                new ObjectParameter("Recibido", recibido) :
                new ObjectParameter("Recibido", typeof(string));
    
            var idUsuarioParameter = idUsuario.HasValue ?
                new ObjectParameter("IdUsuario", idUsuario) :
                new ObjectParameter("IdUsuario", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var cajaParameter = caja.HasValue ?
                new ObjectParameter("Caja", caja) :
                new ObjectParameter("Caja", typeof(int));
    
            var operacionParameter = operacion.HasValue ?
                new ObjectParameter("Operacion", operacion) :
                new ObjectParameter("Operacion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PPEgreso", pagadoAParameter, cedulaParameter, montoParameter, conceptoParameter, preparadoParameter, aprobadoParameter, recibidoParameter, idUsuarioParameter, idParameter, cajaParameter, operacionParameter);
        }
    
        public virtual int PPpagos(string idPersona, string referencia, Nullable<double> monto, Nullable<int> tipoPago, Nullable<int> idUsuario, Nullable<int> idCaja)
        {
            var idPersonaParameter = idPersona != null ?
                new ObjectParameter("IdPersona", idPersona) :
                new ObjectParameter("IdPersona", typeof(string));
    
            var referenciaParameter = referencia != null ?
                new ObjectParameter("Referencia", referencia) :
                new ObjectParameter("Referencia", typeof(string));
    
            var montoParameter = monto.HasValue ?
                new ObjectParameter("Monto", monto) :
                new ObjectParameter("Monto", typeof(double));
    
            var tipoPagoParameter = tipoPago.HasValue ?
                new ObjectParameter("TipoPago", tipoPago) :
                new ObjectParameter("TipoPago", typeof(int));
    
            var idUsuarioParameter = idUsuario.HasValue ?
                new ObjectParameter("IdUsuario", idUsuario) :
                new ObjectParameter("IdUsuario", typeof(int));
    
            var idCajaParameter = idCaja.HasValue ?
                new ObjectParameter("IdCaja", idCaja) :
                new ObjectParameter("IdCaja", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PPpagos", idPersonaParameter, referenciaParameter, montoParameter, tipoPagoParameter, idUsuarioParameter, idCajaParameter);
        }
    }
}
